{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"navigation\", \"activeTintColor\", \"inactiveTintColor\", \"renderIcon\", \"getLabelText\", \"allowFontScaling\", \"showLabel\", \"showIcon\", \"upperCaseLabel\", \"tabBarPosition\", \"screenProps\", \"iconStyle\"];\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { TabBar } from 'react-native-tab-view';\nimport Animated from 'react-native-reanimated';\n\nvar TabBarTop = function (_React$PureComponent) {\n  _inherits(TabBarTop, _React$PureComponent);\n\n  var _super = _createSuper(TabBarTop);\n\n  function TabBarTop() {\n    var _this;\n\n    _classCallCheck(this, TabBarTop);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderLabel\", function (_ref) {\n      var route = _ref.route,\n          focused = _ref.focused,\n          color = _ref.color;\n      var _this$props = _this.props,\n          showLabel = _this$props.showLabel,\n          upperCaseLabel = _this$props.upperCaseLabel,\n          labelStyle = _this$props.labelStyle,\n          allowFontScaling = _this$props.allowFontScaling;\n\n      if (showLabel === false) {\n        return null;\n      }\n\n      var label = _this.props.getLabelText({\n        route: route\n      });\n\n      if (typeof label === 'string') {\n        return React.createElement(Animated.Text, {\n          style: [styles.label, {\n            color: color\n          }, labelStyle],\n          allowFontScaling: allowFontScaling\n        }, upperCaseLabel ? label.toUpperCase() : label);\n      }\n\n      if (typeof label === 'function') {\n        return label({\n          focused: focused,\n          tintColor: color\n        });\n      }\n\n      return label;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderIcon\", function (_ref2) {\n      var route = _ref2.route,\n          focused = _ref2.focused,\n          color = _ref2.color;\n      var _this$props2 = _this.props,\n          renderIcon = _this$props2.renderIcon,\n          showIcon = _this$props2.showIcon,\n          iconStyle = _this$props2.iconStyle;\n\n      if (showIcon === false) {\n        return null;\n      }\n\n      return React.createElement(View, {\n        style: [styles.icon, iconStyle]\n      }, renderIcon({\n        route: route,\n        focused: focused,\n        tintColor: color\n      }));\n    });\n\n    return _this;\n  }\n\n  _createClass(TabBarTop, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          navigation = _this$props3.navigation,\n          activeTintColor = _this$props3.activeTintColor,\n          inactiveTintColor = _this$props3.inactiveTintColor,\n          renderIcon = _this$props3.renderIcon,\n          getLabelText = _this$props3.getLabelText,\n          allowFontScaling = _this$props3.allowFontScaling,\n          showLabel = _this$props3.showLabel,\n          showIcon = _this$props3.showIcon,\n          upperCaseLabel = _this$props3.upperCaseLabel,\n          tabBarPosition = _this$props3.tabBarPosition,\n          screenProps = _this$props3.screenProps,\n          iconStyle = _this$props3.iconStyle,\n          rest = _objectWithoutProperties(_this$props3, _excluded);\n\n      return React.createElement(TabBar, _extends({}, rest, {\n        activeColor: activeTintColor,\n        inactiveColor: inactiveTintColor,\n        navigationState: navigation.state,\n        renderIcon: this._renderIcon,\n        renderLabel: this._renderLabel\n      }));\n    }\n  }]);\n\n  return TabBarTop;\n}(React.PureComponent);\n\nexport { TabBarTop as default };\n\n_defineProperty(TabBarTop, \"defaultProps\", {\n  activeTintColor: 'rgba(255, 255, 255, 1)',\n  inactiveTintColor: 'rgba(255, 255, 255, 0.7)',\n  showIcon: false,\n  showLabel: true,\n  upperCaseLabel: true,\n  allowFontScaling: true\n});\n\nvar styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24\n  },\n  label: {\n    textAlign: 'center',\n    fontSize: 13,\n    margin: 4,\n    backgroundColor: 'transparent'\n  }\n});","map":{"version":3,"sources":["MaterialTopTabBar.tsx"],"names":["TabBarTop","React","activeTintColor","inactiveTintColor","showIcon","showLabel","upperCaseLabel","allowFontScaling","color","label","route","styles","focused","tintColor","iconStyle","renderIcon","render","rest","navigation","_renderLabel","icon","height","width","textAlign","fontSize","margin","backgroundColor"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { TabBar } from 'react-native-tab-view';\nimport Animated from 'react-native-reanimated';\nimport { NavigationRoute } from 'react-navigation';\nimport { MaterialTabBarProps } from '../types';\n\ntype Scene = { route: NavigationRoute; focused: boolean; color: string };\n\nexport default class TabBarTop extends React.PureComponent<\n  MaterialTabBarProps\n> {\n  static defaultProps = {\n    activeTintColor: 'rgba(255, 255, 255, 1)',\n    inactiveTintColor: 'rgba(255, 255, 255, 0.7)',\n    showIcon: false,\n    showLabel: true,\n    upperCaseLabel: true,\n    allowFontScaling: true,\n  };\n\n  _renderLabel = ({ route, focused, color }: Scene) => {\n    const {\n      showLabel,\n      upperCaseLabel,\n      labelStyle,\n      allowFontScaling,\n    } = this.props;\n\n    if (showLabel === false) {\n      return null;\n    }\n\n    const label = this.props.getLabelText({ route });\n\n    if (typeof label === 'string') {\n      return (\n        <Animated.Text\n          style={[styles.label, { color }, labelStyle]}\n          allowFontScaling={allowFontScaling}\n        >\n          {upperCaseLabel ? label.toUpperCase() : label}\n        </Animated.Text>\n      );\n    }\n\n    if (typeof label === 'function') {\n      return label({ focused, tintColor: color });\n    }\n\n    return label;\n  };\n\n  _renderIcon = ({ route, focused, color }: Scene) => {\n    const { renderIcon, showIcon, iconStyle } = this.props;\n\n    if (showIcon === false) {\n      return null;\n    }\n\n    return (\n      <View style={[styles.icon, iconStyle]}>\n        {renderIcon({\n          route,\n          focused,\n          tintColor: color,\n        })}\n      </View>\n    );\n  };\n\n  render() {\n    const {\n      navigation,\n      activeTintColor,\n      inactiveTintColor,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      renderIcon,\n      getLabelText,\n      allowFontScaling,\n      showLabel,\n      showIcon,\n      upperCaseLabel,\n      tabBarPosition,\n      screenProps,\n      iconStyle,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      ...rest\n    } = this.props;\n\n    return (\n      <TabBar\n        {...rest}\n        activeColor={activeTintColor}\n        inactiveColor={inactiveTintColor}\n        navigationState={navigation.state}\n        renderIcon={this._renderIcon}\n        renderLabel={this._renderLabel}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24,\n  },\n  label: {\n    textAlign: 'center',\n    fontSize: 13,\n    margin: 4,\n    backgroundColor: 'transparent',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}