{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableItem from \"./TouchableItem\";\nimport Animated from 'react-native-reanimated';\nimport memoize from \"./memoize\";\nvar AnimatedInterpolate = Animated.interpolateNode || Animated.interpolate;\nvar DEFAULT_ACTIVE_COLOR = 'rgba(255, 255, 255, 1)';\nvar DEFAULT_INACTIVE_COLOR = 'rgba(255, 255, 255, 0.7)';\n\nvar TabBarItem = function (_React$Component) {\n  _inherits(TabBarItem, _React$Component);\n\n  var _super = _createSuper(TabBarItem);\n\n  function TabBarItem() {\n    var _this;\n\n    _classCallCheck(this, TabBarItem);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"getActiveOpacity\", memoize(function (position, routes, tabIndex) {\n      if (routes.length > 1) {\n        var inputRange = routes.map(function (_, i) {\n          return i;\n        });\n        return AnimatedInterpolate(position, {\n          inputRange: inputRange,\n          outputRange: inputRange.map(function (i) {\n            return i === tabIndex ? 1 : 0;\n          })\n        });\n      } else {\n        return 1;\n      }\n    }));\n\n    _defineProperty(_assertThisInitialized(_this), \"getInactiveOpacity\", memoize(function (position, routes, tabIndex) {\n      if (routes.length > 1) {\n        var inputRange = routes.map(function (_, i) {\n          return i;\n        });\n        return AnimatedInterpolate(position, {\n          inputRange: inputRange,\n          outputRange: inputRange.map(function (i) {\n            return i === tabIndex ? 0 : 1;\n          })\n        });\n      } else {\n        return 0;\n      }\n    }));\n\n    return _this;\n  }\n\n  _createClass(TabBarItem, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          route = _this$props.route,\n          position = _this$props.position,\n          navigationState = _this$props.navigationState,\n          renderLabelPassed = _this$props.renderLabel,\n          renderIcon = _this$props.renderIcon,\n          renderBadge = _this$props.renderBadge,\n          getLabelText = _this$props.getLabelText,\n          getTestID = _this$props.getTestID,\n          getAccessibilityLabel = _this$props.getAccessibilityLabel,\n          getAccessible = _this$props.getAccessible,\n          _this$props$activeCol = _this$props.activeColor,\n          activeColor = _this$props$activeCol === void 0 ? DEFAULT_ACTIVE_COLOR : _this$props$activeCol,\n          _this$props$inactiveC = _this$props.inactiveColor,\n          inactiveColor = _this$props$inactiveC === void 0 ? DEFAULT_INACTIVE_COLOR : _this$props$inactiveC,\n          pressColor = _this$props.pressColor,\n          pressOpacity = _this$props.pressOpacity,\n          labelStyle = _this$props.labelStyle,\n          style = _this$props.style,\n          onLayout = _this$props.onLayout,\n          onPress = _this$props.onPress,\n          onLongPress = _this$props.onLongPress;\n      var tabIndex = navigationState.routes.indexOf(route);\n      var isFocused = navigationState.index === tabIndex;\n      var activeOpacity = this.getActiveOpacity(position, navigationState.routes, tabIndex);\n      var inactiveOpacity = this.getInactiveOpacity(position, navigationState.routes, tabIndex);\n      var icon = null;\n      var label = null;\n\n      if (renderIcon) {\n        var activeIcon = renderIcon({\n          route: route,\n          focused: true,\n          color: activeColor\n        });\n        var inactiveIcon = renderIcon({\n          route: route,\n          focused: false,\n          color: inactiveColor\n        });\n\n        if (inactiveIcon != null && activeIcon != null) {\n          icon = React.createElement(View, {\n            style: styles.icon\n          }, React.createElement(Animated.View, {\n            style: {\n              opacity: inactiveOpacity\n            }\n          }, inactiveIcon), React.createElement(Animated.View, {\n            style: [StyleSheet.absoluteFill, {\n              opacity: activeOpacity\n            }]\n          }, activeIcon));\n        }\n      }\n\n      var renderLabel = renderLabelPassed !== undefined ? renderLabelPassed : function (_ref) {\n        var route = _ref.route,\n            color = _ref.color;\n        var labelText = getLabelText({\n          route: route\n        });\n\n        if (typeof labelText === 'string') {\n          return React.createElement(Animated.Text, {\n            style: [styles.label, icon ? {\n              marginTop: 0\n            } : null, labelStyle, {\n              color: color\n            }]\n          }, labelText);\n        }\n\n        return labelText;\n      };\n\n      if (renderLabel) {\n        var activeLabel = renderLabel({\n          route: route,\n          focused: true,\n          color: activeColor\n        });\n        var inactiveLabel = renderLabel({\n          route: route,\n          focused: false,\n          color: inactiveColor\n        });\n        label = React.createElement(View, null, React.createElement(Animated.View, {\n          style: {\n            opacity: inactiveOpacity\n          }\n        }, inactiveLabel), React.createElement(Animated.View, {\n          style: [StyleSheet.absoluteFill, {\n            opacity: activeOpacity\n          }]\n        }, activeLabel));\n      }\n\n      var tabStyle = StyleSheet.flatten(style);\n      var isWidthSet = (tabStyle === null || tabStyle === void 0 ? void 0 : tabStyle.width) !== undefined;\n      var tabContainerStyle = isWidthSet ? null : {\n        flex: 1\n      };\n      var scene = {\n        route: route\n      };\n      var accessibilityLabel = getAccessibilityLabel(scene);\n      accessibilityLabel = typeof accessibilityLabel !== 'undefined' ? accessibilityLabel : getLabelText(scene);\n      var badge = renderBadge ? renderBadge(scene) : null;\n      return React.createElement(TouchableItem, {\n        borderless: true,\n        testID: getTestID(scene),\n        accessible: getAccessible(scene),\n        accessibilityLabel: accessibilityLabel,\n        accessibilityTraits: isFocused ? ['button', 'selected'] : 'button',\n        accessibilityComponentType: \"button\",\n        accessibilityRole: \"tab\",\n        accessibilityState: {\n          selected: isFocused\n        },\n        accessibilityStates: isFocused ? ['selected'] : [],\n        pressColor: pressColor,\n        pressOpacity: pressOpacity,\n        delayPressIn: 0,\n        onLayout: onLayout,\n        onPress: onPress,\n        onLongPress: onLongPress,\n        style: tabContainerStyle\n      }, React.createElement(View, {\n        pointerEvents: \"none\",\n        style: [styles.item, tabStyle]\n      }, icon, label, badge != null ? React.createElement(View, {\n        style: styles.badge\n      }, badge) : null));\n    }\n  }]);\n\n  return TabBarItem;\n}(React.Component);\n\nexport { TabBarItem as default };\nvar styles = StyleSheet.create({\n  label: {\n    margin: 4,\n    backgroundColor: 'transparent'\n  },\n  icon: {\n    margin: 2\n  },\n  item: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 10,\n    minHeight: 48\n  },\n  badge: {\n    position: 'absolute',\n    top: 0,\n    right: 0\n  }\n});","map":{"version":3,"sources":["TabBarItem.tsx"],"names":["AnimatedInterpolate","Animated","DEFAULT_ACTIVE_COLOR","DEFAULT_INACTIVE_COLOR","React","memoize","routes","inputRange","outputRange","i","render","renderLabel","activeColor","inactiveColor","onLongPress","tabIndex","navigationState","isFocused","activeOpacity","inactiveOpacity","icon","label","activeIcon","renderIcon","route","focused","color","inactiveIcon","styles","opacity","StyleSheet","renderLabelPassed","labelText","getLabelText","marginTop","activeLabel","inactiveLabel","tabStyle","isWidthSet","tabContainerStyle","flex","scene","accessibilityLabel","getAccessibilityLabel","badge","renderBadge","getTestID","getAccessible","selected","margin","backgroundColor","item","alignItems","justifyContent","padding","minHeight","position","top","right"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  View,\n  StyleProp,\n  LayoutChangeEvent,\n  TextStyle,\n  ViewStyle,\n} from 'react-native';\nimport TouchableItem from './TouchableItem';\nimport { Scene, Route, NavigationState } from './types';\nimport Animated from 'react-native-reanimated';\nimport memoize from './memoize';\n\n// @ts-ignore\nconst AnimatedInterpolate = Animated.interpolateNode || Animated.interpolate;\n\nexport type Props<T extends Route> = {\n  position: Animated.Node<number>;\n  route: T;\n  navigationState: NavigationState<T>;\n  activeColor?: string;\n  inactiveColor?: string;\n  pressColor?: string;\n  pressOpacity?: number;\n  getLabelText: (scene: Scene<T>) => string | undefined;\n  getAccessible: (scene: Scene<T>) => boolean | undefined;\n  getAccessibilityLabel: (scene: Scene<T>) => string | undefined;\n  getTestID: (scene: Scene<T>) => string | undefined;\n  renderLabel?: (scene: {\n    route: T;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  renderIcon?: (scene: {\n    route: T;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  renderBadge?: (scene: Scene<T>) => React.ReactNode;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  onPress: () => void;\n  onLongPress: () => void;\n  labelStyle?: StyleProp<TextStyle>;\n  style: StyleProp<ViewStyle>;\n};\n\nconst DEFAULT_ACTIVE_COLOR = 'rgba(255, 255, 255, 1)';\nconst DEFAULT_INACTIVE_COLOR = 'rgba(255, 255, 255, 0.7)';\n\nexport default class TabBarItem<T extends Route> extends React.Component<\n  Props<T>\n> {\n  private getActiveOpacity = memoize(\n    (position: Animated.Node<number>, routes: Route[], tabIndex: number) => {\n      if (routes.length > 1) {\n        const inputRange = routes.map((_, i) => i);\n\n        return AnimatedInterpolate(position, {\n          inputRange,\n          outputRange: inputRange.map((i) => (i === tabIndex ? 1 : 0)),\n        });\n      } else {\n        return 1;\n      }\n    }\n  );\n\n  private getInactiveOpacity = memoize((position, routes, tabIndex) => {\n    if (routes.length > 1) {\n      const inputRange = routes.map((_: Route, i: number) => i);\n\n      return AnimatedInterpolate(position, {\n        inputRange,\n        outputRange: inputRange.map((i: number) => (i === tabIndex ? 0 : 1)),\n      });\n    } else {\n      return 0;\n    }\n  });\n\n  render() {\n    const {\n      route,\n      position,\n      navigationState,\n      renderLabel: renderLabelPassed,\n      renderIcon,\n      renderBadge,\n      getLabelText,\n      getTestID,\n      getAccessibilityLabel,\n      getAccessible,\n      activeColor = DEFAULT_ACTIVE_COLOR,\n      inactiveColor = DEFAULT_INACTIVE_COLOR,\n      pressColor,\n      pressOpacity,\n      labelStyle,\n      style,\n      onLayout,\n      onPress,\n      onLongPress,\n    } = this.props;\n\n    const tabIndex = navigationState.routes.indexOf(route);\n    const isFocused = navigationState.index === tabIndex;\n\n    const activeOpacity = this.getActiveOpacity(\n      position,\n      navigationState.routes,\n      tabIndex\n    );\n    const inactiveOpacity = this.getInactiveOpacity(\n      position,\n      navigationState.routes,\n      tabIndex\n    );\n\n    let icon: React.ReactNode | null = null;\n    let label: React.ReactNode | null = null;\n\n    if (renderIcon) {\n      const activeIcon = renderIcon({\n        route,\n        focused: true,\n        color: activeColor,\n      });\n      const inactiveIcon = renderIcon({\n        route,\n        focused: false,\n        color: inactiveColor,\n      });\n\n      if (inactiveIcon != null && activeIcon != null) {\n        icon = (\n          <View style={styles.icon}>\n            <Animated.View style={{ opacity: inactiveOpacity }}>\n              {inactiveIcon}\n            </Animated.View>\n            <Animated.View\n              style={[StyleSheet.absoluteFill, { opacity: activeOpacity }]}\n            >\n              {activeIcon}\n            </Animated.View>\n          </View>\n        );\n      }\n    }\n\n    const renderLabel =\n      renderLabelPassed !== undefined\n        ? renderLabelPassed\n        : ({ route, color }: { route: T; color: string }) => {\n            const labelText = getLabelText({ route });\n\n            if (typeof labelText === 'string') {\n              return (\n                <Animated.Text\n                  style={[\n                    styles.label,\n                    icon ? { marginTop: 0 } : null,\n                    labelStyle,\n                    { color },\n                  ]}\n                >\n                  {labelText}\n                </Animated.Text>\n              );\n            }\n\n            return labelText;\n          };\n\n    if (renderLabel) {\n      const activeLabel = renderLabel({\n        route,\n        focused: true,\n        color: activeColor,\n      });\n      const inactiveLabel = renderLabel({\n        route,\n        focused: false,\n        color: inactiveColor,\n      });\n\n      label = (\n        <View>\n          <Animated.View style={{ opacity: inactiveOpacity }}>\n            {inactiveLabel}\n          </Animated.View>\n          <Animated.View\n            style={[StyleSheet.absoluteFill, { opacity: activeOpacity }]}\n          >\n            {activeLabel}\n          </Animated.View>\n        </View>\n      );\n    }\n\n    const tabStyle = StyleSheet.flatten(style);\n    const isWidthSet = tabStyle?.width !== undefined;\n    const tabContainerStyle: ViewStyle | null = isWidthSet ? null : { flex: 1 };\n\n    const scene = { route };\n\n    let accessibilityLabel = getAccessibilityLabel(scene);\n\n    accessibilityLabel =\n      typeof accessibilityLabel !== 'undefined'\n        ? accessibilityLabel\n        : getLabelText(scene);\n\n    const badge = renderBadge ? renderBadge(scene) : null;\n\n    return (\n      <TouchableItem\n        borderless\n        testID={getTestID(scene)}\n        accessible={getAccessible(scene)}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityTraits={isFocused ? ['button', 'selected'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"tab\"\n        accessibilityState={{ selected: isFocused }}\n        // @ts-ignore: this is to support older React Native versions\n        accessibilityStates={isFocused ? ['selected'] : []}\n        pressColor={pressColor}\n        pressOpacity={pressOpacity}\n        delayPressIn={0}\n        onLayout={onLayout}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        style={tabContainerStyle}\n      >\n        <View pointerEvents=\"none\" style={[styles.item, tabStyle]}>\n          {icon}\n          {label}\n          {badge != null ? <View style={styles.badge}>{badge}</View> : null}\n        </View>\n      </TouchableItem>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  label: {\n    margin: 4,\n    backgroundColor: 'transparent',\n  },\n  icon: {\n    margin: 2,\n  },\n  item: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 10,\n    minHeight: 48,\n  },\n  badge: {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}